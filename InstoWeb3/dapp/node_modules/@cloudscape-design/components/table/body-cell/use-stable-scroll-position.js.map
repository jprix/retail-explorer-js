{"version":3,"file":"use-stable-scroll-position.js","sourceRoot":"","sources":["../../../../src/table/body-cell/use-stable-scroll-position.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAEtC,OAAc,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAEnD,MAAM,UAAU,YAAY,CAAC,GAAgB;IAC3C,IAAM,cAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;IAC9D,IAAM,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAEjE,OAAO,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,IAAI,CAAC,gBAAgB,CAAC;AAChE,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,GAAuB;IACzD,OAAO,CAAC,GAAG,IAAI,GAAG,KAAK,QAAQ,CAAC,IAAI;QAClC,CAAC,CAAC,QAAQ,CAAC,IAAI;QACf,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC;YACnB,CAAC,CAAC,GAAG;YACL,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAC7C,CAAC;AASD,IAAM,YAAY,GAAG,UAAC,EAA0B,EAAE,EAA0B;QAArD,EAAE,QAAA,EAAE,EAAE,QAAA;QAAsB,EAAE,QAAA,EAAE,EAAE,QAAA;IACvD,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACpC,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,UAAU,uBAAuB,CACrC,gBAAoC;IAEpC,IAAM,SAAS,GAAG,MAAM,EAAyC,CAAC;IAElE,IAAM,mBAAmB,GAAG,WAAW,CAAC;;QACtC,IAAM,gBAAgB,GAAG,mBAAmB,CAAC,MAAA,gBAAgB,CAAC,OAAO,mCAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;QACxF,IAAI,gBAAgB,EAAE;YACpB,SAAS,CAAC,OAAO,GAAG,CAAC,gBAAgB,CAAC,UAAU,EAAE,gBAAgB,CAAC,SAAS,CAAC,CAAC;SAC/E;IACH,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAEvB,IAAM,qBAAqB,GAAG,WAAW,CAAC;;;QACxC,IAAM,gBAAgB,GAAG,mBAAmB,CAAC,MAAA,gBAAgB,CAAC,OAAO,mCAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;QACxF,IACE,SAAS,CAAC,OAAO;YACjB,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,KAAK;YACtC,YAAY,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,gBAAgB,CAAC,UAAU,EAAE,gBAAgB,CAAC,SAAS,CAAC,CAAC,EAC1F;YACA,KAA4D,SAAS,CAAC,OAAO,EAA5E,gBAAgB,CAAC,UAAU,QAAA,EAAE,gBAAgB,CAAC,SAAS,QAAA,CAAsB;SAC/E;IACH,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAEvB,OAAO,EAAE,mBAAmB,qBAAA,EAAE,qBAAqB,uBAAA,EAAE,CAAC;AACxD,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useRef } from 'react';\n\nexport function isScrollable(ele: HTMLElement) {\n  const overflowXStyle = window.getComputedStyle(ele).overflowX;\n  const isOverflowHidden = overflowXStyle.indexOf('hidden') !== -1;\n\n  return ele.scrollWidth > ele.clientWidth && !isOverflowHidden;\n}\n\nexport function getScrollableParent(ele: HTMLElement | null): HTMLElement {\n  return !ele || ele === document.body\n    ? document.body\n    : isScrollable(ele)\n    ? ele\n    : getScrollableParent(ele.parentElement);\n}\n\nexport interface UseStableScrollPositionResult {\n  /** Stores the current scroll position of the nearest scrollable container. */\n  storeScrollPosition: () => void;\n  /** Restores the scroll position of the nearest scrollable container to the last stored position. */\n  restoreScrollPosition: () => void;\n}\n\nconst shouldScroll = ([cx, cy]: [number, number], [px, py]: [number, number]) => {\n  return cx - px > 5 || cy - py > 5;\n};\n\n/**\n * This hook stores the scroll position of the nearest scrollable parent of the\n * `activeElementRef` when `storeScrollPosition` is called, and restores it when\n * `restoreScrollPosition` is called.\n * @param activeElementRef Ref to an active element in the table. This is used to find the nearest scrollable parent.\n */\nexport function useStableScrollPosition<T extends HTMLElement>(\n  activeElementRef: React.RefObject<T>\n): UseStableScrollPositionResult {\n  const scrollRef = useRef<Parameters<HTMLBodyElement['scroll']>>();\n\n  const storeScrollPosition = useCallback(() => {\n    const scrollableParent = getScrollableParent(activeElementRef.current ?? document.body);\n    if (scrollableParent) {\n      scrollRef.current = [scrollableParent.scrollLeft, scrollableParent.scrollTop];\n    }\n  }, [activeElementRef]);\n\n  const restoreScrollPosition = useCallback(() => {\n    const scrollableParent = getScrollableParent(activeElementRef.current ?? document.body);\n    if (\n      scrollRef.current &&\n      scrollRef.current.toString() !== '0,0' &&\n      shouldScroll(scrollRef.current, [scrollableParent.scrollLeft, scrollableParent.scrollTop])\n    ) {\n      [scrollableParent.scrollLeft, scrollableParent.scrollTop] = scrollRef.current;\n    }\n  }, [activeElementRef]);\n\n  return { storeScrollPosition, restoreScrollPosition };\n}\n"]}